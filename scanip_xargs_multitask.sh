seq -f "%g" 1 255 |xargs -I {} -P 100 -n 1 \
sh -c 'nc -z -w 1 192.168.100.{} 22  && echo "Port 22 on 192.168.100.{} is open" || echo "Port 22 on 192.168.100.{} is close"'
# 这个Bash命令是一个组合命令，它使用了几个Unix/Linux命令和shell特性来并行检查IP地址范围192.168.100.1到192.168.100.255的22端口（SSH端口）的开放状态。下面是命令的逐行解释：

# 1. `seq -f "%g" 1 255`：
#    - `seq`命令用于生成一个数字序列。
#    - `-f "%g"` 选项允许你指定输出格式，`%g` 表示不使用任何前缀或后缀的数字。
#    - `1 255` 指定了序列的起始和结束值，即从1到255。

# 2. `|xargs -I {} -P 100 -n 1`：
#    - `xargs`命令用于构建并执行命令行。
#    - `-I {}` 选项指定了一个替换字符串，`{}` 会被`seq`命令的输出替换。
#    - `-P 100` 选项指定了并行执行的最大进程数，这里是100。
#    - `-n 1` 选项指定了每次给子命令传递的参数数量，这里是1。

# 3. `sh -c '...'`：
#    - `sh -c` 用于执行一个新shell，并运行后面的命令字符串。
#    - 这里的`'...'`是要执行的命令。

# 4. `nc -z -w 1 192.168.100.{} 22`：
#    - `nc`（netcat）是一个网络工具，用于读取和写入网络连接。
#    - `-z` 选项告诉`nc`扫描监听的守护进程，不发送任何数据。
#    - `-w 1` 选项设置了超时时间为1秒。
#    - `192.168.100.{}` 是IP地址，`{}`会被`xargs`替换为`seq`命令生成的数字。
#    - `22` 是要检查的端口号。

# 5. `&& echo "Port 22 on 192.168.100.{} is open"`：
#    - 如果`nc`命令成功（即端口开放），则执行`echo`命令打印端口开放的信息。

# 6. `|| echo "Port 22 on 192.168.100.{} is close"`：
#    - 如果`nc`命令失败（即端口关闭或超时），则执行`echo`命令打印端口关闭的信息。

# 这个命令会并行地对192.168.100.1到192.168.100.255的每个IP地址的22端口进行扫描，检查端口是否开放，并输出每个端口的状态。由于`-P 100`，它会同时启动最多100个并行进程来执行端口扫描，这样可以大幅提高扫描效率。
